'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _util = require('./util');

var resolved = {};

function loadScript(url, callback, errorCallback) {
    var invokeCallback = function invokeCallback() {
        resolved[url] = true;

        if ((0, _util.isFunction)(callback)) {
            callback();
        }
    };

    if (resolved[url]) {
        invokeCallback();

        return;
    }

    var script = document.createElement('script');
    script.type = 'text/javascript';

    if (script.readyState) {
        //IE
        script.onreadystatechange = function () {
            if (script.readyState == 'loaded' || script.readyState == 'complete') {
                script.onreadystatechange = null;
                invokeCallback();
            }
        };
    } else {
        //Others
        script.onload = function () {
            invokeCallback();
        };
    }

    script.onerror = function (e) {
        resolved[url] = false;
        console.log('error', e);
        if ((0, _util.isFunction)(errorCallback)) {
            errorCallback();
        }
    };

    script.src = url;
    var parent = document.body || document.head || document;
    parent.appendChild(script);
}

function get(src, opts) {
    if ((0, _util.isString)(src)) {
        return new Promise(function (resolve, reject) {
            loadScript(src, function () {
                return resolve(true);
            }, function () {
                return reject();
            });
        });
    } else if ((0, _util.isArray)(src)) {
        var _ret = function () {
            var p = Promise.resolve(true);

            src.forEach(function (url) {
                p = p.then(function () {
                    return get(url);
                });
            });

            return {
                v: p
            };
        }();

        if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
    }

    throw new Error('Invalid argument for get()');
}

exports.default = get;